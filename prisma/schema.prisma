generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  memo          Memo[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// locals
model Memo {
  id         String      @id @default(cuid())
  author     String
  title      String      @db.VarChar(100)
  content    String
  created_at DateTime    @default(now()) @db.Timestamptz()
  updated_at DateTime    @updatedAt @db.Timestamptz()
  user       User        @relation(fields: [author], references: [id], onDelete: Cascade)
  images     MemoImage[]

  @@map("memos")
}

model MemoImage {
  id     String @id @default(cuid())
  url    String
  memoId String @map("memo_id")
  memo   Memo   @relation(fields: [memoId], references: [id], onDelete: Cascade)

  @@map("memo_images")
}

model YouTubePlaylist {
  id         String             @id @default(cuid())
  title      String             @db.VarChar(100)
  created_at DateTime           @default(now()) @db.Timestamptz()
  updated_at DateTime           @updatedAt @db.Timestamptz()
  videoInfos YouTubeVideoInfo[]

  @@map("youtube_playlist")
}

model YouTubeVideoInfo {
  id                String          @id @default(cuid())
  time              String          @db.VarChar(100)
  title             String          @db.VarChar(100)
  author            String          @db.VarChar(100)
  views             String          @db.VarChar(100)
  date              String          @db.VarChar(100)
  thumbUrl          String
  shareUrl          String
  created_at        DateTime        @default(now()) @db.Timestamptz()
  updated_at        DateTime        @updatedAt @db.Timestamptz()
  youtubePlaylistId String          @map("youtube_playlist_id")
  youTubePlaylist   YouTubePlaylist @relation(fields: [youtubePlaylistId], references: [id])

  @@map("youtube_video_infos")
}
