generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 계정 시작
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  postCategory  PostCategory[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 계정 끝

// 포스트 시작

model PostCategory {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  name        String            @unique @db.VarChar(50)
  isPrivate   Boolean           @default(false) @map("is_private")
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subCategory PostSubCategory[]
  post        Post[]

  @@map("post_categories")
}

model PostSubCategory {
  id         String       @id @default(cuid())
  categoryId String       @map("category_id")
  name       String       @db.VarChar(50)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  category   PostCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId]) // 같은 메인 카테고리 내에서는 중복 허용 안 함
  @@map("post_sub_categories")
}

model Post {
  id         String        @id @default(cuid())
  userId     String        @map("user_id")
  categoryId String?       @map("category_id")
  title      String        @db.VarChar(100)
  content    String
  isPrivate  Boolean       @default(false) @map("is_private")
  createdAt  DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   PostCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images     PostImage[]

  @@map("posts")
}

model PostImage {
  id     String @id @default(cuid())
  postId String @map("post_id")
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_images")
}

// 포스트 끝

// 기타 시작
model YouTubePlaylist {
  id         String             @id @default(cuid())
  title      String             @db.VarChar(100)
  createdAt  DateTime           @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime           @updatedAt @map("updated_at") @db.Timestamptz()
  videoInfos YouTubeVideoInfo[]

  @@map("youtube_playlist")
}

model YouTubeVideoInfo {
  id                String          @id @default(cuid())
  time              String          @db.VarChar(100)
  title             String          @db.VarChar(100)
  author            String          @db.VarChar(100)
  views             String          @db.VarChar(100)
  date              String          @db.VarChar(100)
  thumbUrl          String
  shareUrl          String
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  youtubePlaylistId String          @map("youtube_playlist_id")
  youTubePlaylist   YouTubePlaylist @relation(fields: [youtubePlaylistId], references: [id])

  @@map("youtube_video_infos")
}

// 기타 끝
