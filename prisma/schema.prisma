generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 계정 시작
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  memo          Memo[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 계정 끝

// 메모 시작
model MemoCategoryAssignment {
  id         String       @id @default(cuid())
  memoId     String       @map("memo_id")
  categoryId String       @map("category_id")
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  memo       Memo         @relation(fields: [memoId], references: [id], onDelete: Cascade)
  category   MemoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([memoId, categoryId]) // 동일 메모가 동일 카테고리에 중복 등록되지 않도록 제한
  @@map("memo_category_assignments")
}

model MemoCategory {
  id            String                   @id @default(cuid())
  name          String                   @unique @db.VarChar(50)
  createdAt     DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime                 @updatedAt @map("updated_at") @db.Timestamptz()
  subCategories MemoSubCategory[]
  assignments   MemoCategoryAssignment[]

  @@map("memo_categories")
}

model MemoSubCategory {
  id         String       @id @default(cuid())
  categoryId String       @map("category_id")
  name       String       @db.VarChar(50)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  category   MemoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([name, categoryId]) // 같은 메인 카테고리 내에서는 중복 허용 안 함
  @@map("memo_sub_categories")
}

model Memo {
  id          String                   @id @default(cuid())
  author      String
  title       String                   @db.VarChar(100)
  content     String
  createdAt   DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime                 @updatedAt @map("updated_at") @db.Timestamptz()
  user        User                     @relation(fields: [author], references: [id], onDelete: Cascade)
  images      MemoImage[]
  assignments MemoCategoryAssignment[]

  @@map("memos")
}

model MemoImage {
  id     String @id @default(cuid())
  memoId String @map("memo_id")
  url    String
  memo   Memo   @relation(fields: [memoId], references: [id], onDelete: Cascade)

  @@map("memo_images")
}

// 메모 끝

// 기타 시작
model YouTubePlaylist {
  id         String             @id @default(cuid())
  title      String             @db.VarChar(100)
  createdAt  DateTime           @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime           @updatedAt @map("updated_at") @db.Timestamptz()
  videoInfos YouTubeVideoInfo[]

  @@map("youtube_playlist")
}

model YouTubeVideoInfo {
  id                String          @id @default(cuid())
  time              String          @db.VarChar(100)
  title             String          @db.VarChar(100)
  author            String          @db.VarChar(100)
  views             String          @db.VarChar(100)
  date              String          @db.VarChar(100)
  thumbUrl          String
  shareUrl          String
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  youtubePlaylistId String          @map("youtube_playlist_id")
  youTubePlaylist   YouTubePlaylist @relation(fields: [youtubePlaylistId], references: [id])

  @@map("youtube_video_infos")
}

// 기타 끝
